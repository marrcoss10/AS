---DOCKER---
-Ver contenedores en marcha --> sudo docker ps
-Ver contenedores creados --> sudo docker ps -a
-Ver imágenes creads --> sudo docker images
-Borrar contenedor --> sudo docker rm ID/nombrecontenedor
-Borrar imágen --> sudo docker rmi ID/nombreimagen
-Borrar todos los contenedores e imágenes creadas --> sudo docker prune
-Fichero Docker para elasticsearch:
	vim docker-compose.yaml
		services:
		  elasticsearch:
		    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
		    container_name: elasticsearch
		    environment:
		      - discovery.type=single-node
		      - xpack.security.enabled=false
		    volumes:
		      - data01:/usr/share/elasticsearch
		    ports:
		      - 9200:9200
		      - 9300:9300
		  volumes:
		    data01:
-Levantar contenedor --> sudo docker compose up
-Comprobar funcionamiento: (google)
	-Google cloud --> IP_EXTERNA:9200
	-Local --> localhost:9200

---ELASTICSEARCH---
-Descargar ficheros --> curl -O url.zip
-Descomprimir --> unzip name.zip 

-Recuperar índices --> curl 127.0.0.1:9200/_cat/indices?v
-Leer mapping de un índice --> curl -XGET 127.0.0.1:9200/nomIndex/_mapping
-Nº de docs de un índice --> curl -XGET 127.0.0.1:9200/nombreIndex/_count?pretty
-Documentos de un índice --> curl -XGET 127.0.0.1:9200/nombreIndex/_search?pretty

-Crear un índice --> curl -H "Content-Type: application/json" -XPUT 127.0.0.1/9200/nombreIndex
-Cargar un documento --> curl -H "Content-Type: application/json" -XPOST 127.0.0.1:9200/nombreIndex/_doc/ID --data-binary @name.json
-Cargar varios documentos --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_bulk' --data-binary @name.json

-Añadir campos a un índice --> curl -H "Content-Type: application/json" -XPUT '127.0.0.1:9200/nombreIndex/_mapping?pretty' -d {
   "properties:"{"campoA":{"type":"text"},"campoB":{"type":"integer"}}
 }
-Cargar datos --> Crear un documento json (name.json): "luego bulk"
	{"index":{"_id":"1"}}
	{"campoA":"abc","campoB":10}
	{"index":{"_id":"2"}}
	{"campoA":"def","campoB":23}
-Modificar un documento --> curl -H "Content-Type: application/json" -XPOST '127.0.0.1:9200/nombreIndex/_update/ID' -d {"campoB":100}
-Eliminar un documento --> curl -XDELETE '127.0.0.1:9200/nombreIndex/_doc/ID' 

-Buscar 10 resultados --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_search?pretty' -d '{"from":0,"size":10}'
-Ciudad Bilbao --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_search?pretty' -d '{"query":{"match":{"city":"Bilbao"}}}'
-Ordenar por edad ascendente --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_search?pretty' -d '{"sort":[{"age":"asc"}}]}' //desc
-Pais X pero no Y ciudad --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_search?pretty' -d '{
   "query":{"bool":{
     "must":[{"match":{"country":"X"}}],
     "must_not":[{"match":{"city":"Y"}}]
   }}
 }'
-Buscar nombre Paco, como Pco --> curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/nombreIndex/_search?pretty' -d '{"query":{"fuzzy":{"name":"Pco"}}}'
-Más búsquedas:
	-Filter --> Dentro de un bool
	-Should --> Dentro de un filter, y dentro de otro bool dentro del filter --> [{}] "Se cumple una u otra"
	-Match_phrase --> Como match pero para frases largas
		-Variante --> "match_phrase":{"desc":{"query":"la casa es azul", "slop":2}} --> Consigue también la azul casa
	-Multi_match --> "multi_match": {"query":"roja","fields":["campoA","campoB"]} --> "permite hacer la misma query en múltiples campos"
	-Expresiones regulares "regexp":
		- ab. --> 1 (cualquiera)
		- a+b+ --> 1..*
		- ab* --> 0..*
		- ab? --> 0..1
		- a{3}b --> 3
		- a{2,4} --> 2..4
		- a{2,} --> 2..
		- | --> Or
		- [abc] --> a o b o c
		- [a-c] --> a o b o c
		- [^abc] --> cualquiera menos a b o c
-FALTA
	-HITS

	-EJERCICIOS DIAPOSITIVAS
