---5.DOCKER---
1) DOCKER ENGENIE
	a) Utilizando la imagen de 'busybox', obtener la siguiente información
		a1) Mostrar los sistemas de ficheros que están montados 
			sudo docker run busybox ls
		a2) Mostrar el contenido de la carpeta '/etc'
			sudo docker run busybox ls /etc
		a3) Mostrar cuántos binarios ejecutables hay en la carpeta '/bin'
			sudo docker run busybos ls /bin *.bin | wc -l
		a4) Mostrar cuántas interfaces red tiene y qué IPs tiene asignadas
			sudo docker run busybox ifconfig -a
	b) Lanzar un contenedor de 'busybox' con el comando 'ping www.ehu.eus' y parar el contenedor desde otro terminal con 'docker stop'
		sudo docker run busybox ping www.ehu.eus (T1)
		sudo docker ps	 (T2)
		sudo docker stop busybox zen_feynman     (T2)
		#No se para al instante, tarda un poco#
	c) Repetir el paso anterior, pero utilizando 'docker kill'
		sudo docker run busybox ping www.ehu.eus (T1)
		sudo docker ps	 (T2)
		sudo docker kill busybox zen_feynman     (T2)
		#Se para al instante, tarda un poco#
	d) Abrir una Shell dentro de un contenedor 'busybox' utilizando 'docker run' y realizar lo siguiente:
		sudo docker run -it busybox
		d1) Mostrar el número de procesos en ejecución
			ps -e
		d2) Crear un fichero llamado miFichero dentro de /home
			touch /home/miFichero
		d3) Cerrar la sesión
			exit
	e) Abrir una Shell de nuevo y ver si sigue el fichero creado
		sudo docker run -it busybox
		ls /home
		#No aparece el fichero#
	f) Lanzar un contenedor con el servidor 'redis', cogiendo su imagen de DockerHub
		sudo docker pull redis
		sudo docker run redis
	g) Abrir una Shell y obtener la siguiente información:
		sudo docker -it run redis
		g1) Mostrar el contenido de la carpeta '/etc'
			ls /etc
		g2) Mostrar cuántos binarios ejecutables hay en la carpeta '/bin'
			ls /bin *.bin | wc -l
		g3) Ejecutar el comando 'redis-cli' y añadir una variable 'miVar' con el valor '7' y salir de la Shell
			redis-cli
				set miVar 7
				exit
			exit
		g4) Volver a entrar al contenedor y leer el contenido de la variable miVar
			sudo docker exec -it ID/NAME /bin/sh
			get miVar
		g5) Reiniciar el conetedor y volver a leer la variable
			exit
			sudo docker run --restart no redis
			sudo docker ps
			sudo docker exe -it ID/NAME /bin/sh
			redis-cli
				get miVar
				#Devuelve valor nulo#
2) IMÁGENES DOCKER PROPIAS
	a) Crear un directorio y un fichero Dockerfile (ubuntu, instalar redis y ejecutar el comando de arranque redis-server)
		mkdir 5-2
		cd 5-2
		vim Dockerfile
			FROM ubuntu
			RUN apt -qq update
			RUN apt -y -qq install redis
			CMD redis-server
	b) Crear una imagen a partir del Dockerfile con el nombre <usuario>/<redis-ubuntu>
		sudo docker build -t marcos/redis-ubuntu .
		#Se han creado dos contenedores intermedios#
	c) Lanzar un contenedor con la imagen recién creada y abrir una Shell para crear una variable miOtraVar con valor 8 y salir
		sudo docker run marcos/redis-ubuntu
		sudo docker exec -it ID/NAME /bin/sh
		redis-cli
			set miOtraVar 8
			exit
		exit
	d) Volver a abrir una Shell y obtener el valor de la variable 
		sudo docker exec -it ID/NAME /bin/sh
		redis-cli
			get miOtraVar
	e) Crear otra imagen cómo la anterior pero con imagen base 'alpine'
		vim Dockerfile
			FROM alpine
			RUN apk -qq update
			RUN apk -y -qq install redis
			CMD redis-server
	f) Crear una imagen a partir del Dockerfile con el nombre <usuario>/<redis-alpine>
		sudo docker build -t marcos/redis-alpine .
	g) Lanzar un contenedor con la imagen recién creada y abrir una Shell para crear una variable miVar con valor 9
		sudo docker run marcos/redis-alpine
		sudo docker exec -it ID/NAME /bin/sh
		redis-cli
			set miVar 9
	h) Parar el contenedor y comparar los tamaños de las imágenes creadas
		sudo docker kill ID/NAME
		sudo docker images
	i) Crear un directorio nuevo y crear un fichero index.html que contenga X
		mkdir 5-2-1
		cd 5-2-1
		mkdir index.html
			<!DOCTYPE html>
			  <html>
			    <head> <title>Web de prueba de Docker</title> </head>
			    <body> <h1>Hola!</h1> <p>Esta es una web muy simple.</p> </body>
			  </html>
	j) Crear un fichero Dockerfile (ubuntu, instalar python3, copiar index en /miWeb, ubicarse en /miWeb, ejecutar el comando de arranque python3 -m http.server 1080)
		vim Dockerfile
			FROM ubuntu
			RUN apt -qq update
			RUN apt -y -qq install python3
			COPY index.html /miWeb/index.html
			WORKDIR /miWeb
			CMD python3 -m http.server 1080
	k) Crear la imagen con nombre <usuario>/simple-web
		sudo docker build -t marcos/simple-web .
	l) Lanzar el contenedor con la imagen recién creada
		sudo docker run -p 127.0.0.1:1080:80/tcp marcos/simple-web
		Abrir en el navegador http://127.0.0.1:1080
	m) Borrar todas las imágenes y contenedores creados
		sudo docker prune (TODO)
		sudo docker rmi ID/NAME (IMÁGENES)
		sudo docker rm ID/NAME (CONTENEDOR)
